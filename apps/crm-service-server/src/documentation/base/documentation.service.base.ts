/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Documentation as PrismaDocumentation } from "@prisma/client";

export class DocumentationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DocumentationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.documentation.count(args);
  }

  async documentations(
    args: Prisma.DocumentationFindManyArgs
  ): Promise<PrismaDocumentation[]> {
    return this.prisma.documentation.findMany(args);
  }
  async documentation(
    args: Prisma.DocumentationFindUniqueArgs
  ): Promise<PrismaDocumentation | null> {
    return this.prisma.documentation.findUnique(args);
  }
  async createDocumentation(
    args: Prisma.DocumentationCreateArgs
  ): Promise<PrismaDocumentation> {
    return this.prisma.documentation.create(args);
  }
  async updateDocumentation(
    args: Prisma.DocumentationUpdateArgs
  ): Promise<PrismaDocumentation> {
    return this.prisma.documentation.update(args);
  }
  async deleteDocumentation(
    args: Prisma.DocumentationDeleteArgs
  ): Promise<PrismaDocumentation> {
    return this.prisma.documentation.delete(args);
  }
}
