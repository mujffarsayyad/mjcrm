/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PrService } from "../pr.service";
import { PrCreateInput } from "./PrCreateInput";
import { Pr } from "./Pr";
import { PrFindManyArgs } from "./PrFindManyArgs";
import { PrWhereUniqueInput } from "./PrWhereUniqueInput";
import { PrUpdateInput } from "./PrUpdateInput";

export class PrControllerBase {
  constructor(protected readonly service: PrService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Pr })
  async createPr(@common.Body() data: PrCreateInput): Promise<Pr> {
    return await this.service.createPr({
      data: data,
      select: {
        campaignName: true,
        createdAt: true,
        createdBy: true,
        details: true,
        endDate: true,
        id: true,
        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Pr] })
  @ApiNestedQuery(PrFindManyArgs)
  async prs(@common.Req() request: Request): Promise<Pr[]> {
    const args = plainToClass(PrFindManyArgs, request.query);
    return this.service.prs({
      ...args,
      select: {
        campaignName: true,
        createdAt: true,
        createdBy: true,
        details: true,
        endDate: true,
        id: true,
        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Pr })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pr(@common.Param() params: PrWhereUniqueInput): Promise<Pr | null> {
    const result = await this.service.pr({
      where: params,
      select: {
        campaignName: true,
        createdAt: true,
        createdBy: true,
        details: true,
        endDate: true,
        id: true,
        startDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Pr })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePr(
    @common.Param() params: PrWhereUniqueInput,
    @common.Body() data: PrUpdateInput
  ): Promise<Pr | null> {
    try {
      return await this.service.updatePr({
        where: params,
        data: data,
        select: {
          campaignName: true,
          createdAt: true,
          createdBy: true,
          details: true,
          endDate: true,
          id: true,
          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Pr })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePr(
    @common.Param() params: PrWhereUniqueInput
  ): Promise<Pr | null> {
    try {
      return await this.service.deletePr({
        where: params,
        select: {
          campaignName: true,
          createdAt: true,
          createdBy: true,
          details: true,
          endDate: true,
          id: true,
          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
