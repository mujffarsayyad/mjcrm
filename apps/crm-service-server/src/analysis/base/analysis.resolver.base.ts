/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Analysis } from "./Analysis";
import { AnalysisCountArgs } from "./AnalysisCountArgs";
import { AnalysisFindManyArgs } from "./AnalysisFindManyArgs";
import { AnalysisFindUniqueArgs } from "./AnalysisFindUniqueArgs";
import { CreateAnalysisArgs } from "./CreateAnalysisArgs";
import { UpdateAnalysisArgs } from "./UpdateAnalysisArgs";
import { DeleteAnalysisArgs } from "./DeleteAnalysisArgs";
import { AnalysisService } from "../analysis.service";
@graphql.Resolver(() => Analysis)
export class AnalysisResolverBase {
  constructor(protected readonly service: AnalysisService) {}

  async _analysesMeta(
    @graphql.Args() args: AnalysisCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Analysis])
  async analyses(
    @graphql.Args() args: AnalysisFindManyArgs
  ): Promise<Analysis[]> {
    return this.service.analyses(args);
  }

  @graphql.Query(() => Analysis, { nullable: true })
  async analysis(
    @graphql.Args() args: AnalysisFindUniqueArgs
  ): Promise<Analysis | null> {
    const result = await this.service.analysis(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Analysis)
  async createAnalysis(
    @graphql.Args() args: CreateAnalysisArgs
  ): Promise<Analysis> {
    return await this.service.createAnalysis({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Analysis)
  async updateAnalysis(
    @graphql.Args() args: UpdateAnalysisArgs
  ): Promise<Analysis | null> {
    try {
      return await this.service.updateAnalysis({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Analysis)
  async deleteAnalysis(
    @graphql.Args() args: DeleteAnalysisArgs
  ): Promise<Analysis | null> {
    try {
      return await this.service.deleteAnalysis(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
