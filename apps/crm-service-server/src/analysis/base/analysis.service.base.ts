/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Analysis as PrismaAnalysis } from "@prisma/client";

export class AnalysisServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AnalysisCountArgs, "select">): Promise<number> {
    return this.prisma.analysis.count(args);
  }

  async analyses(args: Prisma.AnalysisFindManyArgs): Promise<PrismaAnalysis[]> {
    return this.prisma.analysis.findMany(args);
  }
  async analysis(
    args: Prisma.AnalysisFindUniqueArgs
  ): Promise<PrismaAnalysis | null> {
    return this.prisma.analysis.findUnique(args);
  }
  async createAnalysis(
    args: Prisma.AnalysisCreateArgs
  ): Promise<PrismaAnalysis> {
    return this.prisma.analysis.create(args);
  }
  async updateAnalysis(
    args: Prisma.AnalysisUpdateArgs
  ): Promise<PrismaAnalysis> {
    return this.prisma.analysis.update(args);
  }
  async deleteAnalysis(
    args: Prisma.AnalysisDeleteArgs
  ): Promise<PrismaAnalysis> {
    return this.prisma.analysis.delete(args);
  }
}
