/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AnalysisService } from "../analysis.service";
import { AnalysisCreateInput } from "./AnalysisCreateInput";
import { Analysis } from "./Analysis";
import { AnalysisFindManyArgs } from "./AnalysisFindManyArgs";
import { AnalysisWhereUniqueInput } from "./AnalysisWhereUniqueInput";
import { AnalysisUpdateInput } from "./AnalysisUpdateInput";

export class AnalysisControllerBase {
  constructor(protected readonly service: AnalysisService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Analysis })
  async createAnalysis(
    @common.Body() data: AnalysisCreateInput
  ): Promise<Analysis> {
    return await this.service.createAnalysis({
      data: data,
      select: {
        analysisReportData: true,
        analysisReportName: true,
        createdAt: true,
        createdBy: true,
        id: true,
        reportData: true,
        reportName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Analysis] })
  @ApiNestedQuery(AnalysisFindManyArgs)
  async analyses(@common.Req() request: Request): Promise<Analysis[]> {
    const args = plainToClass(AnalysisFindManyArgs, request.query);
    return this.service.analyses({
      ...args,
      select: {
        analysisReportData: true,
        analysisReportName: true,
        createdAt: true,
        createdBy: true,
        id: true,
        reportData: true,
        reportName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Analysis })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async analysis(
    @common.Param() params: AnalysisWhereUniqueInput
  ): Promise<Analysis | null> {
    const result = await this.service.analysis({
      where: params,
      select: {
        analysisReportData: true,
        analysisReportName: true,
        createdAt: true,
        createdBy: true,
        id: true,
        reportData: true,
        reportName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Analysis })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAnalysis(
    @common.Param() params: AnalysisWhereUniqueInput,
    @common.Body() data: AnalysisUpdateInput
  ): Promise<Analysis | null> {
    try {
      return await this.service.updateAnalysis({
        where: params,
        data: data,
        select: {
          analysisReportData: true,
          analysisReportName: true,
          createdAt: true,
          createdBy: true,
          id: true,
          reportData: true,
          reportName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Analysis })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAnalysis(
    @common.Param() params: AnalysisWhereUniqueInput
  ): Promise<Analysis | null> {
    try {
      return await this.service.deleteAnalysis({
        where: params,
        select: {
          analysisReportData: true,
          analysisReportName: true,
          createdAt: true,
          createdBy: true,
          id: true,
          reportData: true,
          reportName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
