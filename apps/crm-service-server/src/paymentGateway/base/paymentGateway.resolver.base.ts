/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PaymentGateway } from "./PaymentGateway";
import { PaymentGatewayCountArgs } from "./PaymentGatewayCountArgs";
import { PaymentGatewayFindManyArgs } from "./PaymentGatewayFindManyArgs";
import { PaymentGatewayFindUniqueArgs } from "./PaymentGatewayFindUniqueArgs";
import { CreatePaymentGatewayArgs } from "./CreatePaymentGatewayArgs";
import { UpdatePaymentGatewayArgs } from "./UpdatePaymentGatewayArgs";
import { DeletePaymentGatewayArgs } from "./DeletePaymentGatewayArgs";
import { PaymentGatewayService } from "../paymentGateway.service";
@graphql.Resolver(() => PaymentGateway)
export class PaymentGatewayResolverBase {
  constructor(protected readonly service: PaymentGatewayService) {}

  async _paymentGatewaysMeta(
    @graphql.Args() args: PaymentGatewayCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PaymentGateway])
  async paymentGateways(
    @graphql.Args() args: PaymentGatewayFindManyArgs
  ): Promise<PaymentGateway[]> {
    return this.service.paymentGateways(args);
  }

  @graphql.Query(() => PaymentGateway, { nullable: true })
  async paymentGateway(
    @graphql.Args() args: PaymentGatewayFindUniqueArgs
  ): Promise<PaymentGateway | null> {
    const result = await this.service.paymentGateway(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PaymentGateway)
  async createPaymentGateway(
    @graphql.Args() args: CreatePaymentGatewayArgs
  ): Promise<PaymentGateway> {
    return await this.service.createPaymentGateway({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PaymentGateway)
  async updatePaymentGateway(
    @graphql.Args() args: UpdatePaymentGatewayArgs
  ): Promise<PaymentGateway | null> {
    try {
      return await this.service.updatePaymentGateway({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentGateway)
  async deletePaymentGateway(
    @graphql.Args() args: DeletePaymentGatewayArgs
  ): Promise<PaymentGateway | null> {
    try {
      return await this.service.deletePaymentGateway(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
