/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Opportunity as PrismaOpportunity } from "@prisma/client";

export class OpportunityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OpportunityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.opportunity.count(args);
  }

  async opportunities(
    args: Prisma.OpportunityFindManyArgs
  ): Promise<PrismaOpportunity[]> {
    return this.prisma.opportunity.findMany(args);
  }
  async opportunity(
    args: Prisma.OpportunityFindUniqueArgs
  ): Promise<PrismaOpportunity | null> {
    return this.prisma.opportunity.findUnique(args);
  }
  async createOpportunity(
    args: Prisma.OpportunityCreateArgs
  ): Promise<PrismaOpportunity> {
    return this.prisma.opportunity.create(args);
  }
  async updateOpportunity(
    args: Prisma.OpportunityUpdateArgs
  ): Promise<PrismaOpportunity> {
    return this.prisma.opportunity.update(args);
  }
  async deleteOpportunity(
    args: Prisma.OpportunityDeleteArgs
  ): Promise<PrismaOpportunity> {
    return this.prisma.opportunity.delete(args);
  }
}
