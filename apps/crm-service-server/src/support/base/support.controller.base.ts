/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SupportService } from "../support.service";
import { SupportCreateInput } from "./SupportCreateInput";
import { Support } from "./Support";
import { SupportFindManyArgs } from "./SupportFindManyArgs";
import { SupportWhereUniqueInput } from "./SupportWhereUniqueInput";
import { SupportUpdateInput } from "./SupportUpdateInput";

export class SupportControllerBase {
  constructor(protected readonly service: SupportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Support })
  async createSupport(
    @common.Body() data: SupportCreateInput
  ): Promise<Support> {
    return await this.service.createSupport({
      data: data,
      select: {
        assignedTo: true,
        createdAt: true,
        customer: true,
        id: true,
        issue: true,
        priority: true,
        resolution: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Support] })
  @ApiNestedQuery(SupportFindManyArgs)
  async supports(@common.Req() request: Request): Promise<Support[]> {
    const args = plainToClass(SupportFindManyArgs, request.query);
    return this.service.supports({
      ...args,
      select: {
        assignedTo: true,
        createdAt: true,
        customer: true,
        id: true,
        issue: true,
        priority: true,
        resolution: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Support })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async support(
    @common.Param() params: SupportWhereUniqueInput
  ): Promise<Support | null> {
    const result = await this.service.support({
      where: params,
      select: {
        assignedTo: true,
        createdAt: true,
        customer: true,
        id: true,
        issue: true,
        priority: true,
        resolution: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Support })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSupport(
    @common.Param() params: SupportWhereUniqueInput,
    @common.Body() data: SupportUpdateInput
  ): Promise<Support | null> {
    try {
      return await this.service.updateSupport({
        where: params,
        data: data,
        select: {
          assignedTo: true,
          createdAt: true,
          customer: true,
          id: true,
          issue: true,
          priority: true,
          resolution: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Support })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSupport(
    @common.Param() params: SupportWhereUniqueInput
  ): Promise<Support | null> {
    try {
      return await this.service.deleteSupport({
        where: params,
        select: {
          assignedTo: true,
          createdAt: true,
          customer: true,
          id: true,
          issue: true,
          priority: true,
          resolution: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
