/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { Type } from "class-transformer";
import { IsOptional, IsEnum } from "class-validator";
import { StringFilter } from "../../util/StringFilter";
import { EnumSupportPriority } from "./EnumSupportPriority";
import { EnumSupportStatus } from "./EnumSupportStatus";

@InputType()
class SupportWhereInput {
  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  assignedTo?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  customer?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  issue?: StringNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumSupportPriority,
  })
  @IsEnum(EnumSupportPriority)
  @IsOptional()
  @Field(() => EnumSupportPriority, {
    nullable: true,
  })
  priority?: "Option1";

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  resolution?: StringNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumSupportStatus,
  })
  @IsEnum(EnumSupportStatus)
  @IsOptional()
  @Field(() => EnumSupportStatus, {
    nullable: true,
  })
  status?: "Option1";
}

export { SupportWhereInput as SupportWhereInput };
