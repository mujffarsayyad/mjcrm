/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomerCareService } from "../customerCare.service";
import { CustomerCareCreateInput } from "./CustomerCareCreateInput";
import { CustomerCare } from "./CustomerCare";
import { CustomerCareFindManyArgs } from "./CustomerCareFindManyArgs";
import { CustomerCareWhereUniqueInput } from "./CustomerCareWhereUniqueInput";
import { CustomerCareUpdateInput } from "./CustomerCareUpdateInput";

export class CustomerCareControllerBase {
  constructor(protected readonly service: CustomerCareService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomerCare })
  async createCustomerCare(
    @common.Body() data: CustomerCareCreateInput
  ): Promise<CustomerCare> {
    return await this.service.createCustomerCare({
      data: data,
      select: {
        contactMethod: true,
        createdAt: true,
        customerName: true,
        date: true,
        id: true,
        issue: true,
        resolution: true,
        resolvedBy: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomerCare] })
  @ApiNestedQuery(CustomerCareFindManyArgs)
  async customerCares(@common.Req() request: Request): Promise<CustomerCare[]> {
    const args = plainToClass(CustomerCareFindManyArgs, request.query);
    return this.service.customerCares({
      ...args,
      select: {
        contactMethod: true,
        createdAt: true,
        customerName: true,
        date: true,
        id: true,
        issue: true,
        resolution: true,
        resolvedBy: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomerCare })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customerCare(
    @common.Param() params: CustomerCareWhereUniqueInput
  ): Promise<CustomerCare | null> {
    const result = await this.service.customerCare({
      where: params,
      select: {
        contactMethod: true,
        createdAt: true,
        customerName: true,
        date: true,
        id: true,
        issue: true,
        resolution: true,
        resolvedBy: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomerCare })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCustomerCare(
    @common.Param() params: CustomerCareWhereUniqueInput,
    @common.Body() data: CustomerCareUpdateInput
  ): Promise<CustomerCare | null> {
    try {
      return await this.service.updateCustomerCare({
        where: params,
        data: data,
        select: {
          contactMethod: true,
          createdAt: true,
          customerName: true,
          date: true,
          id: true,
          issue: true,
          resolution: true,
          resolvedBy: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomerCare })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomerCare(
    @common.Param() params: CustomerCareWhereUniqueInput
  ): Promise<CustomerCare | null> {
    try {
      return await this.service.deleteCustomerCare({
        where: params,
        select: {
          contactMethod: true,
          createdAt: true,
          customerName: true,
          date: true,
          id: true,
          issue: true,
          resolution: true,
          resolvedBy: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
