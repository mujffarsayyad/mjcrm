/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CustomerCare } from "./CustomerCare";
import { CustomerCareCountArgs } from "./CustomerCareCountArgs";
import { CustomerCareFindManyArgs } from "./CustomerCareFindManyArgs";
import { CustomerCareFindUniqueArgs } from "./CustomerCareFindUniqueArgs";
import { CreateCustomerCareArgs } from "./CreateCustomerCareArgs";
import { UpdateCustomerCareArgs } from "./UpdateCustomerCareArgs";
import { DeleteCustomerCareArgs } from "./DeleteCustomerCareArgs";
import { CustomerCareService } from "../customerCare.service";
@graphql.Resolver(() => CustomerCare)
export class CustomerCareResolverBase {
  constructor(protected readonly service: CustomerCareService) {}

  async _customerCaresMeta(
    @graphql.Args() args: CustomerCareCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CustomerCare])
  async customerCares(
    @graphql.Args() args: CustomerCareFindManyArgs
  ): Promise<CustomerCare[]> {
    return this.service.customerCares(args);
  }

  @graphql.Query(() => CustomerCare, { nullable: true })
  async customerCare(
    @graphql.Args() args: CustomerCareFindUniqueArgs
  ): Promise<CustomerCare | null> {
    const result = await this.service.customerCare(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CustomerCare)
  async createCustomerCare(
    @graphql.Args() args: CreateCustomerCareArgs
  ): Promise<CustomerCare> {
    return await this.service.createCustomerCare({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CustomerCare)
  async updateCustomerCare(
    @graphql.Args() args: UpdateCustomerCareArgs
  ): Promise<CustomerCare | null> {
    try {
      return await this.service.updateCustomerCare({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomerCare)
  async deleteCustomerCare(
    @graphql.Args() args: DeleteCustomerCareArgs
  ): Promise<CustomerCare | null> {
    try {
      return await this.service.deleteCustomerCare(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
